def find_alternate_precedence(petri_net):
    # Estraiamo le transizioni e gli archi dalla rete di Petri
    transitions = {transition['id']: transition for transition in petri_net['transitions']}
    arcs = petri_net['arcs']
    
    # Inizializziamo un dizionario per tenere traccia delle transizioni che soddisfano il constraint
    alternate_precedence = {}

    # Ciclo attraverso gli archi per trovare le transizioni coinvolte in un Alternate Precedence
    for arc in arcs:
        source_id = arc['source']
        target_id = arc['target']
        
        # Se l'arco va da una transizione a una piazza, controlliamo se c'è un'altra transizione 
        # che è sorgente per la stessa piazza
        if source_id in transitions and target_id in transitions:
            source_name = transitions[source_id]['name']
            target_name = transitions[target_id]['name']
            
            # Se la transizione target è preceduta da un'altra transizione
            # e non ci sono altre transizioni che vanno dalla stessa sorgente alla stessa destinazione,
            # allora è un caso di Alternate Precedence
            if target_name not in alternate_precedence and source_name != target_name:
                alternate_precedence[target_name] = source_name

    return alternate_precedence

# Esempio di utilizzo
petri_net = {
    'places': [
        {'id': 'source0', 'name': 'source0', 'initialMarking': '1'},
        {'id': 'sink0', 'name': 'sink0', 'initialMarking': None, 'finalMarking': '1'},
        {'id': 'pre_Ship drug', 'name': 'pre_Ship drug', 'initialMarking': None},
        {'id': 'pre_Produce drug in laboratory', 'name': 'pre_Produce drug in laboratory', 'initialMarking': None}
    ],
    'transitions': [
        {'id': 'Produce drug in laboratory', 'name': 'Produce drug in laboratory'},
        {'id': 'Ship drug', 'name': 'Ship drug'},
        {'id': 'Receive drugs order from hospital', 'name': 'Receive drugs order from hospital'}
    ],
    'arcs': [
        {'source': 'pre_Ship drug', 'target': 'Ship drug'},
        {'source': 'pre_Produce drug in laboratory', 'target': 'Produce drug in laboratory'},
        {'source': 'Ship drug', 'target': 'sink0'},
        {'source': 'Produce drug in laboratory', 'target': 'pre_Ship drug'},
        {'source': 'source0', 'target': 'Receive drugs order from hospital'},
        {'source': 'Receive drugs order from hospital', 'target': 'pre_Produce drug in laboratory'}
    ]
}

alternate_precedence = find_alternate_precedence(petri_net)
print("Attività su cui si è verificato il constraint Alternate Precedence:")
for target, source in alternate_precedence.items():
    print(f"{target} è preceduta da {source}")
